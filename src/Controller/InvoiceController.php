<?php

namespace App\Controller;

use App\Entity\Invoice;
use App\Factory\InvoiceFactory;
use App\Repository\InvoiceRepository;
use FOS\RestBundle\Context\Context;
use FOS\RestBundle\View\View;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Serializer\Serializer;
use Symfony\Component\Serializer\SerializerInterface;
use Symfony\Component\Validator\Validator\ValidatorInterface;
use FOS\RestBundle\Controller\Annotations\Post;

class InvoiceController
{
    use ControllerHelper;

    /** @var Serializer */
    private $serializer;

    /** @var ValidatorInterface */
    private $validator;

    /** @var InvoiceRepository */
    private $invoiceRepository;

    public function __construct(SerializerInterface $serializer, ValidatorInterface $validator, InvoiceRepository $invoiceRepository)
    {
        $this->serializer = $serializer;
        $this->validator = $validator;
        $this->invoiceRepository = $invoiceRepository;
    }

    /**
     * Autogenerated by FoSRESTBundle:
     *
     * Route: "post_invoices"
     * Method: [POST]
     * Path: /invoices
     *
     * @param Request $request
     * @return View
     */
    public function postInvoicesAction(Request $request)
    {
        /** @var Invoice $invoice */
        $invoice = $this->serializer->deserialize($request->getContent(), Invoice::class, 'json');

        if (Invoice::STATUS_CREDITED === $invoice->getStatus()) {
            throw new \LogicException('Cannot create Credited invoices via POST /invoices. Use POST /invoices/{id}/credit instead.');
        }

        // add the entire change set and relations into the Unit of Work of the ORM
        $invoice = $this->invoiceRepository->merge($invoice);
        $this->validate($invoice);
        $this->invoiceRepository->flush();

        return (new View($invoice))->setContext((new Context())->setGroups(['index']));
    }

    /**
     * @Post("/invoices/{invoiceId}/credit")
     *
     * @param int $invoiceId
     *
     * @return View
     */
    public function postInvoicesCreditAction(int $invoiceId, InvoiceFactory $invoiceFactory)
    {
        /** @var Invoice $invoice */
        $invoice = $this->invoiceRepository->findOr404($invoiceId);

        if ($invoice->isPaid() || Invoice::STATUS_DRAFT === $invoice->getStatus()) {
            throw new \LogicException('Cannot credit paid or draft invoices.');
        }

        // generate an invoice with inverse prices
        $creditInvoice = $invoiceFactory->creditFactory($invoice);

        $creditInvoice = $this->invoiceRepository->merge($creditInvoice);
        $this->invoiceRepository->flush();

        return (new View($creditInvoice))->setContext((new Context())->setGroups(['index']));
    }

    /**
     * Autogenerated by FoSRESTBundle:
     *
     * Route: "get_invoice"
     * Method: [GET]
     * Path: /invoices/{invoice_id}
     *
     * @param $invoiceId
     * @return View
     */
    public function getInvoicesAction($invoiceId)
    {
        /** @var Invoice $invoice */
        $invoice = $this->invoiceRepository->findOr404($invoiceId);

        return (new View($invoice))->setContext((new Context())->setGroups(['index']));
    }

    /**
     * Autogenerated by FoSRESTBundle:
     *
     * Route: "patch_invoice"
     * Method: [PATCH]
     * Path: /invoices/{invoice_id}
     *
     * @param Request $request
     * @param int $invoiceId
     *
     * @return View
     */
    public function patchInvoiceAction(Request $request, int $invoiceId)
    {
        /** @var Invoice $invoice */
        $invoice = $this->invoiceRepository->findOr404($invoiceId);

        // endpoint does nothing for non-Draft Invoices
        if (Invoice::STATUS_DRAFT === $invoice->getStatus()) {
            $updatedInvoice = $this->invoiceRepository->mergefromData(
                $invoice,
                json_decode($request->getContent())
            );
            $this->validate($invoice);

            $this->invoiceRepository->save($updatedInvoice);
        }

        return (new View($invoice))->setContext((new Context())->setGroups(['index']));
    }
}